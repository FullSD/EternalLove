@inject HttpClient _client

<EditForm Model="@match" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label>Name:</label>
            <div>
                <InputSelect @bind-Value="match.UserDetail1Id" class="form-control">
                    <option value="">-- Select User --</option>
                    @if (UserDetails != null)
                    {
                        foreach (var userdetail in UserDetails)
                        {
                            <option value="@userdetail.Id">@userdetail.Name</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => match.UserDetail1Id)" />
            </div>
        </div>
        <div class="form-group">
            <label>Name:</label>
            <div>
                <InputSelect @bind-Value="match.UserDetail2Id" class="form-control">
                    <option value="">-- Select User --</option>
                    @if (UserDetails != null)
                    {
                        foreach (var userdetail in UserDetails)
                        {
                            <option value="@userdetail.Id">@userdetail.Name</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => match.UserDetail2Id)" />
            </div>
        </div>
    </fieldset>
    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>

    }
    <BackToList Target="matchs" />
</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Match match { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<UserDetail> UserDetails;

    protected async override Task OnInitializedAsync()
    {
        UserDetails = await _client.GetFromJsonAsync<List<UserDetail>>($"{Endpoints.UserDetailsEndpoint}");
    }
}
