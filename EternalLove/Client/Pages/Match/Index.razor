@page "/matchs/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@inject HttpInterceptorService _interceptor
@implements IDisposable


<h3 class="card-title">Match</h3>
<style>
    h3 {
        color: aliceblue;

    }

    body {
        background-color: hotpink;
    }
</style>
<br />

<a href="/matchs/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create Match
</a>
<br />
<br />

@if (Matchs == null)
{
    <div class="alert alert-info">Loading UserDetails...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Name</th>
                <th>Name</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var match in Matchs)
            {
                <tr>
                    <td>@match.UserDetail1.Name</td>
                    <td>@match.UserDetail2.Name</td>
                    <td>
                        <a href="/matchs/view/@match.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/matchs/edit/@match.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(match.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

}

@code {
    private List<Match> Matchs;

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        Matchs = await _client.GetFromJsonAsync<List<Match>>($"{Endpoints.MatchsEndpoint}");
    }
    async Task Delete(int matchId)
    {
        var match = Matchs.First(q => q.Id == matchId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {match.Id}");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.MatchsEndpoint}/{matchId}");
            await OnInitializedAsync();
        }
    }
    public void Dispose()
    {
        _interceptor.DisposeEvent();
    }

}
