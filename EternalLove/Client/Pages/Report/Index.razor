@page  "/reports/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h3 class="card-title">Reports</h3>

<br />
<a href="/reports/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Reports
</a>
<br />
<br />

@if (Reports == null)
{
    <div class="alert alert-info"> Loading Reports...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Name</th>
                <th>Report</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var report in Reports)
            {
            <tr>
                <td>@report.User.Name</td>
                <td>@report.ReportBugs</td>
                <td>
                    <a href="/reports/view/@report.Id" class="btn btn-primary">
                        <span class="oi oi-book"></span>
                    </a>
                    <a href="/reports/edit/@report.Id" class="btn btn-warning">
                        <span class="oi oi-pencil"></span>
                    </a>
                    <button class="btn btn-danger" @onclick="@(()=>Delete(report.Id))">
                        <span class="oi oi-delete"></span>
                    </button>
                </td>
            </tr>

            }
        </tbody>
    </table>
}

@code {
    private List<Report> Reports;

    protected async override Task OnInitializedAsync()
    {
        Reports = await _client.GetFromJsonAsync<List<Report>>($"{Endpoints.ReportsEndpoint}");
    }

    async Task Delete(int ReportId)
    {
        var report = Reports.First(q => q.Id == ReportId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {report.ReportBugs}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.ReportsEndpoint}/{ReportId}");
            await OnInitializedAsync();
        }


    }
}